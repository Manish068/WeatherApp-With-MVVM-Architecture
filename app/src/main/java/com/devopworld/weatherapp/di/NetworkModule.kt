package com.devopworld.weatherapp.diimport android.content.Contextimport com.devopworld.weatherapp.BuildConfigimport com.devopworld.weatherapp.common.Constantimport com.devopworld.weatherapp.network.ApiServiceimport com.devopworld.weatherapp.network.NoConnectivityInterceptorimport com.google.gson.GsonBuilderimport dagger.Moduleimport dagger.Providesimport dagger.hilt.InstallInimport dagger.hilt.android.qualifiers.ApplicationContextimport dagger.hilt.components.SingletonComponentimport okhttp3.OkHttpClientimport okhttp3.logging.HttpLoggingInterceptorimport retrofit2.Retrofitimport retrofit2.converter.gson.GsonConverterFactoryimport java.util.concurrent.TimeUnitimport javax.inject.Singleton/** * @Module  you can provide Hilt with binding information by using Hilt modules *@InstallIn to tell Hilt which Android class each module will be used or installed in. * *///we use SingletonComponent class to use the same instance for Retrofit in whole application lifecycle@Module@InstallIn(SingletonComponent::class)object NetworkModule {    /**     * @Provides used on external class which we don't own the class like Room Database,Retrofit, OkHttpClient     *     * */    //provide http logging interceptor    @Provides    @Singleton    fun provideHttpLogging() = HttpLoggingInterceptor() . apply {        level = HttpLoggingInterceptor.Level.BODY    }    //inject http logging intercept    //provide okHttpClient    @Provides    @Singleton    fun okHttpClientProvider(@ApplicationContext context: Context, httpLoggingInterceptor: HttpLoggingInterceptor):OkHttpClient{        val clientBuilder = OkHttpClient.Builder()        if(BuildConfig.DEBUG){            clientBuilder.addInterceptor(httpLoggingInterceptor)        }        //add network interceptor so if error occur due to no internet connection we can handle it        clientBuilder.addInterceptor(NoConnectivityInterceptor(context))        //adding a query because we know it will remain same        clientBuilder.addInterceptor { chain->            val request = chain.request().newBuilder()                .url(chain.request().url.newBuilder().addQueryParameter("APPID",Constant.APP_ID).addQueryParameter("q","Bengaluru").build())                .build()            chain.proceed(request)        }        clientBuilder.readTimeout(120,TimeUnit.SECONDS)        clientBuilder.writeTimeout(120,TimeUnit.SECONDS)        return clientBuilder.build()    }    //inject OkHttpClient    //this provide Network service Using Retrofit    @Provides    @Singleton    fun provideRetrofitService(okHttpClient: OkHttpClient): ApiService{        val retrofit = Retrofit.Builder()            .baseUrl(Constant.BASE_URL)            .client(okHttpClient)            .addConverterFactory(GsonConverterFactory.create(GsonBuilder().create()))            .build()    return  retrofit.create(ApiService::class.java)    }}